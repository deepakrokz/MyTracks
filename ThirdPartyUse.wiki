#summary How to use the mytracks recording service from another application.
#labels Deprecated

= Introduction =

It is possible to use mytracks from another application, and directly perform actions such as starting/stopping recording of a track and adding waypoints or statistics markers.

It is also possible to read track data directly from mytracks - e.g. to export it to a custom format or destination, or use it for other calculations.

= MyTracks Library =

All of the code needed to talk to My Tracks is in the MyTracksLib project (in addition to Android's standard APIs).

The recommended way to bring MyTracksLib into your project, if you're using Mercurial, is to use an hgsub:

{{{
$ echo MyTracksLib = http://mytracks.googlecode.com/hg/MyTracksLib > .hgsub
$ hg add .hgsub
$ hg clone http://mytracks.googlecode.com/hg/MyTracksLib MyTracksLib
$ hg commit -m "Added MyTracksLib subrepository"
}}}

You can then later pull new changes from our repository into yours easily (even if you have applied your own changes on top, you'll just need to merge or rebase as usual). For more details on Mercurial subrepositories, see [http://mercurial.selenic.com/wiki/Subrepository the official documentation].

== Import My Tracks Projects ==
File -> Import ... -> Select the directory that contains all of the My Tracks code.

== Import MyTracksLib into your project ==
Select your project, open properties then select the Android property on the left click the Add button and choose MyTracksLib in the window that pops up.

= MyTracks Service =

Third party applications can make calls on the My Tracks service to start or stop recording.  See the [http://code.google.com/p/mytracks/source/browse/MyTracksLib/src/com/google/android/apps/mytracks/services/ITrackRecordingService.aidl aidl] to see the full interface.

To use this class you must declare the following permissions in your manifest:
{{{
<uses-permission android:name="com.google.android.apps.mytracks.WRITE_TRACK_DATA" />
}}}

Here is a code sample for getting a reference to the My Tracks service:
{{{
Intent intent = new Intent();
intent.setComponent(new ComponentName(
        getString(R.string.mytracks_service_package),
        getString(R.string.mytracks_service_class)));
if (!bindService(intent, this, 0)) {
  Log.e(TAG, "Couldn't bind to service.");
  return;
}
}}}
{{{
private ITrackRecordingService mytracksService;

@Override
public void onServiceConnected(ComponentName name, IBinder service) {
  synchronized (this) {
    mytracksService = ITrackRecordingService.Stub.asInterface(service);
  }
}
}}}

= MyTracks Provider =

To use this class you must declare the following permissions in your manifest:
{{{
<uses-permission android:name="com.google.android.apps.mytracks.READ_TRACK_DATA" />
<uses-permission android:name="com.google.android.apps.mytracks.WRITE_TRACK_DATA" />
}}}

Example code:
{{{
private MyTracksProviderUtils utils;

@Override
public void onCreate() {
  super.onCreate();
    ...
  utils = new MyTracksProviderUtilsImpl(this.getContentResolver());
}
}}}

= My Tracks Notifications =