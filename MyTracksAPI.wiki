#summary Other Android applications can use the MyTracks API to access MyTracks data and start/stop a recording.
#labels Phase-Support

= Introduction =
!MyTracks API consists of three mechanisms, content provider, service, and notifications, to allow third-party applications to access and control !MyTracks data.

Access to the !MyTracks API is protected through the Android permissions. In addition to the permissions, !MyTracks has a setting inside the !MyTracks app to allow users to enable and revoke access to third-party applications.

Note that Android will only grant permissions to the third-party apps if !MyTracks is already installed when installing the third-party apps. 

Through the content provider, one can read/write the !MyTracks database.
Through the service, one can start/stop the !MyTracks recording service. Finally, through the notifications, one can get notified when a recording has started/stopped.

= Setup =
!MyTracks provides the !MyTracksLib to make it easier for third-party apps to access !MyTracks.

The following assumes you are using Eclipse for your Android development.
In Eclipse, make sure your Java Compiler is set to 1.6.

 # Download the !MyTracks code to get !MyTracksLib
{{{
hg clone https://mytracks.googlecode.com/hg mytracks
}}}
 # Import the !MyTracksLib project
  * File->Import...
  * General->Existing Projects into Workspace
  * Select root directory: mytracks/!MyTracksLib
  * Finish
 # Add !MyTracksLib to your Android app ==
  * Project->Properties
  * Under the "Library" section
  * Add...
  * pick !MyTracksLib
  * OK
 # Reference protobuf-java-2.3.0-lite.jar in your Android app ==
  * Project->Properties
  * Java Build Path
  * Libraries
  * Add JARs...
  * !MyTracksLib/libs/protobuf-java-2.3.0-lite.jar
  * OK
  * OK

= !MyTracks Content Provider =
 # Add the following permission to !AndroidManifest.xml for read access
{{{
<uses-permission android:name="com.google.android.apps.mytracks.READ_TRACK_DATA" />
}}}
 # Add the following permission to !AndroidManifest.xml for write access
{{{
<uses-permission android:name="com.google.android.apps.mytracks.WRITE_TRACK_DATA" />
}}}
 # Sample
You can access the content provider by getting a !ContentResolver, through getContentResolver, and calling the various methods like query and insert and passing in the appropriate URIs. However, !MyTracks makes it easier to access the content provider by providing an utility library, !MyTracksProviderUtils, that provides many methods to invoke the content provider.
{{{
  private MyTracksProviderUtils utils;

  @Override
  public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    utils = MyTracksProviderUtils.Factory.get(this);
  }
  
  @Override
  protected void onStart() {
    super.onStart();

    // An example of getting all the tracks    
    List<Track> tracks = utils.getAllTracks(); 
    for (Track track : tracks) {
      System.out.println("***** Track id " + track.getId());
    }
  }
}}}

= !MyTracks Service =
 # Add the following permission to !AndroidManifest.xml
{{{
 <uses-permission android:name="com.google.android.apps.mytracks.WRITE_TRACK_DATA" />
}}}
 # Sample
To use the service, you need to first start the service, then bind it. Afterwards, you can invoke the various methods of the service. To cleanup, you need to unbind and stop the service.
{{{
public class MyTracksApiSampleActivity extends Activity implements ServiceConnection {
  private ITrackRecordingService myTracksService;

  @Override
  public void onServiceConnected(ComponentName name, IBinder service) {
    synchronized (this) {
      myTracksService = ITrackRecordingService.Stub.asInterface(service);
    }
  }

  @Override
  public void onServiceDisconnected(ComponentName name) {
    myTracksService = null;
  }
}
  // the following are just code snippets
  
  Intent intent = new Intent();
  intent.setComponent(new ComponentName(
      getString(R.string.mytracks_service_package),
      getString(R.string.mytracks_service_class)));

  startService(intent);
  bindService(intent, this, 0)

  /*
   * bindService is asynchronous. Need to make sure binding completes
   * before invoking the service's methods.
   */

  myTracksService.startNewTrack();
  myTracksService.endCurrentTrack();

  // unbind and stop the service
  unbindService(this);
  stopService(intent); 
}}}

= !MyTracks Notifications =
 # Add the following permission to !AndroidManifest.xml
{{{
<uses-permission android:name="com.google.android.apps.mytracks.TRACK_NOTIFICATIONS" />
}}}
 # Sample
{{{
public class Receiver extends BroadcastReceiver {
  @Override
  public void onReceive(Context context, Intent intent) {
    String action = intent.getAction();
    long trackId = intent.getLongExtra(context.getString(R.string.track_id_broadcast_extra), -1L);
    Toast.makeText(context, action + " " + trackId, Toast.LENGTH_LONG).show();
  }
}
}}}

= Sample Client App =
See !MyTracksApiSample on the top level directory of the !MyTracks code base.